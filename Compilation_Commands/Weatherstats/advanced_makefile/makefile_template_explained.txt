# define the C compiler to user
CC      = gcc

# define the compiler flags
CFLAGS  = -stdc=11 -Wall -fmax-errors=10 -Wextra

# define library paths in addition to /usr/lib
LFLAGS  =

# define libraries to use
LIBS    =

# define the object files that this project needs
OBJFILES = program.o weatherstats.o

# define tha name of the executable file
MAIN    = program

# all of the below is generic - one typically only adjusts the above.
# Meaning you can just copy and paste this code with simply defining:
# LIBS, OBJFILES and MAIN

all: $(MAIN)

$(MAIN): $(OBJFILES)
        $(CC) $(CCFLAGS) -o $(MAIN) $(OBJFILES)

%.o: %.c
        $(CC) $(CFLAGS) -c -o $@ $<

clean:
        rm -f $(OBJFILES) $(MAIN)



************
Annotations:
************

_______________________________________________
$(MAIN): $(OBJFILES)
        $(CC) $(CCFLAGS) -o $(MAIN) $(OBJFILES)
_______________________________________________


It is equivalent to::

program: program.o weatherstats.o
	gcc -std=c11 -Wall -fmax-errors=10 -Wextra program.o weatherstats.o -o program


___________________________________
%.o: %.c
        $(CC) $(CFLAGS) -c -o $@ $<
___________________________________


It is equivalent to:

program.o: program.c weatherstats.h
	gcc -std=c11 -Wall -fmax-errors=10 -Wextra -c program.c -o program.o

weatherstats.o: weatherstats.c 
	gcc -std=c11 -Wall -fmax-errors=10 -Wetra -c weatherstats.c -o weatherstats.o

_________________________________
clean:  
        rm -f $(OBJFILES) $(MAIN)
_________________________________

_After the application is built from typing "make" into the terminal it will produce
".o" files and an executable as an output of a build process. 
_Upon typing "make clean" will delete all ".o" files and the executable 
